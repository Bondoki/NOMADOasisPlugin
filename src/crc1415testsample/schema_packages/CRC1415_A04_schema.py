#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from typing import (
    TYPE_CHECKING,
)

from nomad.datamodel.data import (
    ArchiveSection,
    EntryData,
)
from nomad.datamodel.metainfo.eln import Chemical, Sample
from nomad.metainfo import (
    MEnum,
    Package,
    Quantity,
    Section,
)

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='Electronic Lab Notebook entry for CRC1415-A04')


class Chemical(Chemical, EntryData, ArchiveSection):
    """
    This is an example description for Chemical.
    A description can contain **markdown** markup and TeX formulas, like $\\sum\\limits_{i=0}^{n}$.
    """

    m_def = Section()
    form = Quantity(
        type=MEnum(['crystalline solid', 'powder', 'solution']),
        a_eln={'component': 'EnumEditQuantity'},
    )
    cas_number = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    ec_number = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Chemical` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class Sample(Sample, EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    name = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
        default='Default Sample Name',
    )
    tags = Quantity(
        type=MEnum(['internal', 'collaboration', 'project', 'other']),
        a_eln={'component': 'AutocompleteEditQuantity'},
        shape=['*'],
    )
    chemicals = Quantity(
        type=Chemical,
        a_eln={'component': 'ReferenceEditQuantity'},
        shape=['*'],
    )
    substrate_type = Quantity(
        type=MEnum(['crystalline solid', 'powder', 'solution', 'other']),
        a_eln={'component': 'RadioEnumEditQuantity'},
    )
    sample_is_from_collaboration = Quantity(
        type=bool,
        a_eln={'component': 'BoolEditQuantity'},
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Sample` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


m_package.__init_metainfo__()
