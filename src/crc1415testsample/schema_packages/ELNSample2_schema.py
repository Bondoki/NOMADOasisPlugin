#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import plotly.express as px
from nomad.datamodel.metainfo.plot import PlotSection
from nomad.datamodel.metainfo.eln import ELNMeasurement
#from nomad.parsing.tabular import TableData
from nomad.datamodel.data import UserReference, AuthorReference
from nomad.datamodel.metainfo.eln import ELNSubstance
from nomad.datamodel.metainfo.basesections.v1 import ReadableIdentifiers
from nomad.datamodel.metainfo.basesections.v1 import PureSubstance
from nomad.datamodel.metainfo.basesections.v1 import PureSubstanceSection
from nomad.datamodel.metainfo.eln import ELNInstrument
from nomad.datamodel.metainfo.eln import Chemical
from nomad.datamodel.data import EntryData
import numpy as np
from typing import (
    TYPE_CHECKING,
)
from nomad.metainfo import (
    MSection,
    Package,
    Quantity,
    SubSection,
    MEnum,
    Reference,
    Datetime,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)
from nomad.datamodel.data import (
    EntryDataCategory,
)
from nomad.metainfo.metainfo import (
    Category,
)
from nomad.units import ureg
from nomad.datamodel.metainfo.plot import (
    PlotlyFigure,
    PlotSection,
)

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='CRC1415 Sample ELN Molecule')

class CRC1415Category(EntryDataCategory):
    """
    A category for all plugins defined in the `crc1415-plugin` plugin.
    """

    m_def = Category(label='CRC1415', categories=[EntryDataCategory])

class CRC1415Chemical(Chemical, EntryData, ArchiveSection):
    '''
    This is an example description for Chemical.
    A description can contain **markdown** markup and TeX formulas, like $\\sum\\limits_{i=0}^{n}$.
    '''
    m_def = Section(
        categories=[CRC1415Category],
        label='CRC1415-Chemical',
    )
    form = Quantity(
        type=MEnum(['crystalline solid', 'powder', 'solution']),
        a_eln={
            "component": "EnumEditQuantity"
        },
    )
    cas_number = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    ec_number = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `CRC1415Chemical` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Instrument(ELNInstrument, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Instrument` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class IRInstrument(Instrument, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()


class Contributors(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Contributors = Quantity(
        type=AuthorReference,
        a_eln={
            "component": "AuthorEditQuantity"
        },
    )


#class XRDMeasurement(ELNMeasurement, TableData, PlotSection, ArchiveSection):
class XRDMeasurement(ELNMeasurement, PlotSection, ArchiveSection):
    '''
    Class for handling measurement of XRD.
    '''
    m_def = Section(
        categories=[CRC1415Category],
        label='CRC1415-Measurement-XRD',
        a_eln={
            "overview": True,
            "hide": [
                "name",
                "lab_id",
                "method",
                "samples",
                "measurement_identifiers"
            ]
        },
        # a_plotly_graph_object=[
        #     {
        #         "data": [
        #             {
        #                 "x": "#Deg2Theta",
        #                 "y": "#Counts"
        #             }
        #         ],
        #         "layout": {
        #             "title": {
        #                 "text": "Counts over Degree 2Theta"
        #             }
        #         }
        #     }
        # ],
        )
    lab_id = Quantity(
        type=str,
        a_display={
            "visible": False
        },
    )
    data_file = Quantity(
        type=str,
        description='''
        A reference to an uploaded .xyd produced by the XRD instrument.
        ''',
        a_tabular_parser={
            "parsing_options": {
                "sep": "\\t",
                "comment": "#"
            }
        },
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    Deg2Theta = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Deg2Theta"
        },
        shape=["*"],
        unit='deg',
        description='The 2-theta range of the diffractogram',
    )
    Intensity = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Counts"
        },
        shape=["*"],
        unit='dimensionless',
        description='The count at each 2-theta value, dimensionless',
    )
    
    def generate_plots(self) -> list[PlotlyFigure]:
        """
        Generate the plotly figures for the `XRDMeasurement` section.

        Returns:
            list[PlotlyFigure]: The plotly figures.
        """
        figures = []
        #if self.wavelength is None:
        #    return figures

        x_label = '2Theta'
        xaxis_title = f'{x_label} (Â°)'
        x = self.Deg2Theta.to('degree').magnitude

        y_label = 'Intensity'
        yaxis_title = f'{y_label} (a.u.)'
        y = self.Intensity.to('dimensionless').magnitude

        line_linear = px.line(x=x, y=y)

        line_linear.update_layout(
            title=f'{y_label} over {x_label}',
            xaxis_title=xaxis_title,
            yaxis_title=yaxis_title,
            xaxis=dict(
                fixedrange=False,
            ),
            yaxis=dict(
                fixedrange=False,
            ),
            template='plotly_white',
        )

        figures.append(
            PlotlyFigure(
                label=f'{y_label} linear plot',
                figure=line_linear.to_plotly_json(),
            ),
        )

        return figures
    
    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger'):
        """
        The normalize function of the `XRDMeasurement` section.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        # Check if any file is provided
        if self.data_file:
            # Check if the file has the correct extension
            if not self.data_file.endswith('.xyd'):
                logger.warning('The file must have a .xyd extension.')
                #raise ValueError("The file must have a .xyd extension.")
                return
            # Otherwise parse the file
            with archive.m_context.raw_file(self.data_file) as xydfile:
                # Load the data from the file
                dataxydfile = np.loadtxt(xydfile)
                
                # Separate the columns into two variables and copy to 
                self.Deg2Theta = ureg.Quantity(dataxydfile[:, 0], 'degree') # dataxydfile[:, 0]  # First column
                self.Intensity = ureg.Quantity(dataxydfile[:, 1], 'dimensionless') #dataxydfile[:, 1]  # Second column
        
        # In case something is odd here -> just return
        # if not self.results:
        #    return
        
        # Otherwise create plot
        self.figures = self.generate_plots()

class IRMeasurement(ELNMeasurement, PlotSection, ArchiveSection):
    '''
    Class for handling measurement of IR.
    '''
    m_def = Section(
        categories=[CRC1415Category],
        label='CRC1415-Measurement-IR',
        a_eln={
            "overview": True,
            "hide": [
                "name",
                "lab_id",
                "method",
                "samples",
                "measurement_identifiers"
            ]
        },
        # a_plotly_graph_object=[
        #     {
        #         "data": [
        #             {
        #                 "x": "#Deg2Theta",
        #                 "y": "#Counts"
        #             }
        #         ],
        #         "layout": {
        #             "title": {
        #                 "text": "Counts over Degree 2Theta"
        #             }
        #         }
        #     }
        # ],
        )
    lab_id = Quantity(
        type=str,
        a_display={
            "visible": False
        },
    )
    data_file = Quantity(
        type=str,
        description='''
        A reference to an uploaded .dpt produced by the IR instrument.
        ''',
        a_tabular_parser={
            "parsing_options": {
                "sep": "\\t",
                "comment": "#"
            }
        },
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    Wavenumber = Quantity(
        type=np.float64,
        shape=["*"],
        unit='1/cm',
        description='The wavenumber range of the spectrogram',
    )
    Transmittance = Quantity(
        type=np.float64,
        shape=["*"],
        unit='dimensionless',
        description='The transmittance at each wavenumber value, dimensionless',
    )
    
    def generate_plots(self) -> list[PlotlyFigure]:
        """
        Generate the plotly figures for the `XRDMeasurement` section.

        Returns:
            list[PlotlyFigure]: The plotly figures.
        """
        figures = []
        #if self.wavelength is None:
        #    return figures

        x_label = 'Wavenumber'
        xaxis_title = f'{x_label} (cm-1)'
        x = self.Wavenumber.to('1/cm').magnitude

        y_label = 'Transmittance'
        yaxis_title = f'{y_label} (a.u.)'
        y = self.Transmittance.to('dimensionless').magnitude

        line_linear = px.line(x=x, y=y)

        line_linear.update_layout(
            title=f'{y_label} over {x_label}',
            xaxis_title=xaxis_title,
            yaxis_title=yaxis_title,
            xaxis=dict(
                fixedrange=False,
            ),
            yaxis=dict(
                fixedrange=False,
            ),
            template='plotly_white',
        )

        figures.append(
            PlotlyFigure(
                label=f'{y_label} linear plot',
                figure=line_linear.to_plotly_json(),
            ),
        )

        return figures
    
    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger'):
        """
        The normalize function of the `IRMeasurement` section.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        # Check if any file is provided
        if self.data_file:
            # Check if the file has the correct extension
            if not self.data_file.endswith('.dpt'):
                logger.warning('The file must have a .dpt extension.')
                #raise ValueError("The file must have a .xyd extension.")
                return
            # Otherwise parse the file
            with archive.m_context.raw_file(self.data_file) as xyfile:
                # Load the data from the file
                dataxyfile = np.loadtxt(xyfile)
                
                # Separate the columns into two variables and copy to 
                self.Wavenumber = ureg.Quantity(dataxyfile[:, 0], '1/cm') # dataxydfile[:, 0]  # First column
                self.Transmittance = ureg.Quantity(dataxyfile[:, 1], 'dimensionless') #dataxydfile[:, 1]  # Second column
        
        # In case something is odd here -> just return
        # if not self.results:
        #    return
        
        # Otherwise create plot
        self.figures = self.generate_plots()




class CRC1415Sample(ELNSubstance, ReadableIdentifiers, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema for ELNSubstance.
    '''
    m_def = Section(
        categories=[CRC1415Category],
        label='CRC1415-SampleOverview',
        a_eln={
            "lane_width": '600px',
            "properties": {
                "order": [
                    "tags",
                    "name",
                    "short_name",
                    "institute",
                    "owner",
                    "datetime",
                    "lab_id",
                    "molecular_formula",
                    "substance_type",
                    "sample_is_from_collaboration",
                    "Sample_reference_from_collaboration",
                    "description",
                    "chemicals"
                ]
            }
        },
    )
    name = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
        default="Default Sample Name",
    )
    tags = Quantity(
        type=MEnum(['internal', 'collaboration', 'project', 'other']),
        a_eln={
            "component": "AutocompleteEditQuantity"
        },
        shape=["*"],
    )
    chemicals = Quantity(
        type=CRC1415Chemical,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
        shape=["*"],
    )
    substance_type = Quantity(
        type=MEnum(['crystalline solid', 'powder', 'solution', 'other']),
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )
    sample_is_from_collaboration = Quantity(
        type=bool,
        a_eln={
            "component": "BoolEditQuantity"
        },
        default=False,
    )
    Sample_reference_from_collaboration = Quantity(
        type='CRC1415Sample',
        description='If sample is received by collaboration, then reference it here.',
        a_eln={
            "component": "ReferenceEditQuantity"
        },
        shape=["*"],
    )
    
    molecular_formula = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
        )
    
    IR_Instrument = SubSection(
        section_def=IRInstrument,
        repeats=True,
    )
    Contributors = SubSection(
        section_def=Contributors,
        repeats=True,
    )
    XRD_Measurement = SubSection(
        section_def=XRDMeasurement,
        repeats=True,
    )
    
    IR_Measurement = SubSection(
        section_def=IRMeasurement,
        repeats=True,
    )
    

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `CRC1415 Sample` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        # in case only molecular_formula is provided
        if self.molecular_formula and self.pure_substance is None:
            #if self.substance_name and self.pure_substance is None:
            self.pure_substance = PureSubstanceSection(name=self.molecular_formula, molecular_formula=self.molecular_formula)
            #self.pure_substance = PubChemPureSubstanceSection(name=self.molecular_formula)
            self.pure_substance.normalize(archive, logger)
        elif self.molecular_formula and self.pure_substance is not None:
            # PureSubstanceSection already exists and we need to update
            self.pure_substance = None
            self.pure_substance = PureSubstanceSection(name=self.molecular_formula, molecular_formula=self.molecular_formula)
            self.pure_substance.molecular_formula = self.molecular_formula
            # we need to delete manually the results section as
            # elements will by populate by System.normalize fct
            self.elemental_composition = None
            archive.results.material.elements = []
            archive.results.material.elemental_composition = []
            self.pure_substance.normalize(archive, logger)
            
        super().normalize(archive, logger)


m_package.__init_metainfo__()
