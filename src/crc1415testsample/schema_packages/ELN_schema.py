#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.metainfo.plot import PlotSection
from nomad.datamodel.metainfo.eln import ELNMeasurement
# from nomad.parsing.tabular import TableData
from nomad.datamodel.data import UserReference, AuthorReference
from nomad.datamodel.metainfo.eln import ElnWithFormulaBaseSection
from nomad.datamodel.metainfo.basesections.v1 import ReadableIdentifiers
from nomad.datamodel.metainfo.eln import ELNInstrument
from nomad.datamodel.metainfo.eln import Chemical
from nomad.datamodel.data import EntryData

from typing import Type

import numpy as np
from typing import (
    TYPE_CHECKING,
)
from nomad.metainfo import (
    MSection,
    Package,
    Quantity,
    SubSection,
    MEnum,
    Reference,
    Datetime,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)
if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='CRC1415 Sample ELN')


class CRCChemical(Chemical, EntryData, ArchiveSection):
    '''
    This is an example description for Chemical.
    '''
    m_def = Section()
    form = Quantity(
        type=MEnum(['crystalline solid', 'powder', 'solution']),
        a_eln={
            "component": "EnumEditQuantity"
        },
    )
    cas_number = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    ec_number = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Chemical` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Instrument(ELNInstrument, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Instrument` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class IRInstrument(Instrument, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()


class Contributors(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Contributors = Quantity(
        type=AuthorReference,
        a_eln={
            "component": "AuthorEditQuantity"
        },
    )


#class XRDMeasurement(ELNMeasurement, """TableData""", PlotSection, ArchiveSection):
class XRDMeasurement(ELNMeasurement, PlotSection, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "overview": True,
            "hide": [
                "name",
                "lab_id",
                "method",
                "samples",
                "measurement_identifiers"
            ]
        },
        # a_plotly_graph_object=[
        #     {
        #         "data": [
        #             {
        #                 "x": "#Deg2Theta",
        #                 "y": "#Counts"
        #             }
        #         ],
        #         "layout": {
        #             "title": {
        #                 "text": "Counts over Degree 2Theta"
        #             }
        #         }
        #     }
        # ],
        )
    lab_id = Quantity(
        type=str,
        a_display={
            "visible": False
        },
    )
    data_file = Quantity(
        type=str,
        description='''
        A reference to an uploaded .csv produced by the XRD instrument.
        ''',
        a_tabular_parser={
            "parsing_options": {
                "sep": "\\t",
                "comment": "#"
            }
        },
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    Deg2Theta = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Deg2Theta"
        },
        shape=["*"],
    )
    Counts = Quantity(
        type=np.float64,
        a_tabular={
            "name": "Counts"
        },
        shape=["*"],
    )

# workaround for self-reference 
def create_class():
    class CRC1415Sample(ElnWithFormulaBaseSection, ReadableIdentifiers, EntryData, ArchiveSection):
    #class CRC1415Sample(ReadableIdentifiers, EntryData, ArchiveSection):
        '''
        Class autogenerated from yaml schema.
        '''
        m_def = Section(
            a_eln={
                "properties": {
                    "order": [
                        "name",
                        "short_name",
                        "institute",
                        "owner",
                        "datetime",
                        "lab_id",
                        "chemical_formula",
                        "substrate_type",
                        "sample_is_from_collaboration",
                        "Sample reference from collaboration",
                        "tags",
                        "description",
                        "chemicals"
                    ]
                }
            },
        )
        name = Quantity(
            type=str,
            a_eln={
                "component": "StringEditQuantity"
            },
            default="Default Sample Name",
        )
        tags = Quantity(
            type=MEnum(['internal', 'collaboration', 'project', 'other']),
            a_eln={
                "component": "AutocompleteEditQuantity"
            },
            shape=["*"],
        )
        chemicals = Quantity(
            type=Chemical,
            a_eln={
                "component": "ReferenceEditQuantity"
            },
            shape=["*"],
        )
        substrate_type = Quantity(
            type=MEnum(['crystalline solid', 'powder', 'solution', 'other']),
            a_eln={
                "component": "RadioEnumEditQuantity"
            },
        )
        sample_is_from_collaboration = Quantity(
            type=bool,
            a_eln={
                "component": "BoolEditQuantity"
            },
            default=False,
        )
        Sample_reference_from_collaboration = Quantity(
            type=locals()['CRC1415Sample'], #CRC1415Sample, #CRC1415Sample, #CRC1415Sample,
            description='If sample is received by collaboration, then reference it here.',
            a_eln={
                "component": "ReferenceEditQuantity"
            },
            shape=["*"],
        )
        IR_Instrument = SubSection(
            section_def=IRInstrument,
            repeats=True,
        )
        Contributors = SubSection(
            section_def=Contributors,
            repeats=True,
        )
        XRD_Measurement = SubSection(
            section_def=XRDMeasurement,
            repeats=True,
        )
        
    #      def __init__(self):
    #          print("dsd")
    #     
        # def __repr__(self):
        #     return f"CRC1415Sample()"
        
        # def create_sample_reference(self) -> CRC1415Sample:
        #     return self.__class__()  # Creates an instance of CRC1415Sample

        def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
            '''
            The normalizer for the `CRC1415 Sample` class.

            Args:
                archive (EntryArchive): The archive containing the section that is being
                normalized.
                logger (BoundLogger): A structlog logger.
            '''
            super().normalize(archive, logger)
    
    return CRC1415Sample


m_package.__init_metainfo__()
